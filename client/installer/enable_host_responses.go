// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/filanov/bm-inventory/models"
)

// EnableHostReader is a Reader for the EnableHost structure.
type EnableHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewEnableHostNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewEnableHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEnableHostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnableHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEnableHostNoContent creates a EnableHostNoContent with default headers values
func NewEnableHostNoContent() *EnableHostNoContent {
	return &EnableHostNoContent{}
}

/*EnableHostNoContent handles this case with default header values.

Success.
*/
type EnableHostNoContent struct {
}

func (o *EnableHostNoContent) Error() string {
	return fmt.Sprintf("[POST /clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] enableHostNoContent ", 204)
}

func (o *EnableHostNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableHostNotFound creates a EnableHostNotFound with default headers values
func NewEnableHostNotFound() *EnableHostNotFound {
	return &EnableHostNotFound{}
}

/*EnableHostNotFound handles this case with default header values.

Error.
*/
type EnableHostNotFound struct {
	Payload *models.Error
}

func (o *EnableHostNotFound) Error() string {
	return fmt.Sprintf("[POST /clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] enableHostNotFound  %+v", 404, o.Payload)
}

func (o *EnableHostNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableHostConflict creates a EnableHostConflict with default headers values
func NewEnableHostConflict() *EnableHostConflict {
	return &EnableHostConflict{}
}

/*EnableHostConflict handles this case with default header values.

Error.
*/
type EnableHostConflict struct {
	Payload *models.Error
}

func (o *EnableHostConflict) Error() string {
	return fmt.Sprintf("[POST /clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] enableHostConflict  %+v", 409, o.Payload)
}

func (o *EnableHostConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableHostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableHostInternalServerError creates a EnableHostInternalServerError with default headers values
func NewEnableHostInternalServerError() *EnableHostInternalServerError {
	return &EnableHostInternalServerError{}
}

/*EnableHostInternalServerError handles this case with default header values.

Error.
*/
type EnableHostInternalServerError struct {
	Payload *models.Error
}

func (o *EnableHostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] enableHostInternalServerError  %+v", 500, o.Payload)
}

func (o *EnableHostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
