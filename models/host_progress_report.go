// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostProgressReport host progress report
//
// swagger:model host-progress-report
type HostProgressReport struct {

	// current progress
	CurrentProgress *HostProgress `json:"current_progress,omitempty"`

	// stages
	Stages []HostStage `json:"stages"`
}

// Validate validates this host progress report
func (m *HostProgressReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostProgressReport) validateCurrentProgress(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentProgress) { // not required
		return nil
	}

	if m.CurrentProgress != nil {
		if err := m.CurrentProgress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_progress")
			}
			return err
		}
	}

	return nil
}

func (m *HostProgressReport) validateStages(formats strfmt.Registry) error {

	if swag.IsZero(m.Stages) { // not required
		return nil
	}

	for i := 0; i < len(m.Stages); i++ {

		if err := m.Stages[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stages" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostProgressReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostProgressReport) UnmarshalBinary(b []byte) error {
	var res HostProgressReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
