// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostInstallProgressParams host install progress params
//
// swagger:model host-install-progress-params
type HostInstallProgressParams struct {

	// progress info
	ProgressInfo string `json:"progress_info,omitempty" gorm:"type:varchar(2048)"`

	// progress status
	// Required: true
	// Enum: [Starting installation Installing Bootstrapping installation Waiting for control plane Writing image to disk Rebooting Joined Done Failed]
	ProgressStatus *string `json:"progress_status"`
}

// Validate validates this host install progress params
func (m *HostInstallProgressParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgressStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostInstallProgressParamsTypeProgressStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Starting installation","Installing","Bootstrapping installation","Waiting for control plane","Writing image to disk","Rebooting","Joined","Done","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostInstallProgressParamsTypeProgressStatusPropEnum = append(hostInstallProgressParamsTypeProgressStatusPropEnum, v)
	}
}

const (

	// HostInstallProgressParamsProgressStatusStartingInstallation captures enum value "Starting installation"
	HostInstallProgressParamsProgressStatusStartingInstallation string = "Starting installation"

	// HostInstallProgressParamsProgressStatusInstalling captures enum value "Installing"
	HostInstallProgressParamsProgressStatusInstalling string = "Installing"

	// HostInstallProgressParamsProgressStatusBootstrappingInstallation captures enum value "Bootstrapping installation"
	HostInstallProgressParamsProgressStatusBootstrappingInstallation string = "Bootstrapping installation"

	// HostInstallProgressParamsProgressStatusWaitingForControlPlane captures enum value "Waiting for control plane"
	HostInstallProgressParamsProgressStatusWaitingForControlPlane string = "Waiting for control plane"

	// HostInstallProgressParamsProgressStatusWritingImageToDisk captures enum value "Writing image to disk"
	HostInstallProgressParamsProgressStatusWritingImageToDisk string = "Writing image to disk"

	// HostInstallProgressParamsProgressStatusRebooting captures enum value "Rebooting"
	HostInstallProgressParamsProgressStatusRebooting string = "Rebooting"

	// HostInstallProgressParamsProgressStatusJoined captures enum value "Joined"
	HostInstallProgressParamsProgressStatusJoined string = "Joined"

	// HostInstallProgressParamsProgressStatusDone captures enum value "Done"
	HostInstallProgressParamsProgressStatusDone string = "Done"

	// HostInstallProgressParamsProgressStatusFailed captures enum value "Failed"
	HostInstallProgressParamsProgressStatusFailed string = "Failed"
)

// prop value enum
func (m *HostInstallProgressParams) validateProgressStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hostInstallProgressParamsTypeProgressStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HostInstallProgressParams) validateProgressStatus(formats strfmt.Registry) error {

	if err := validate.Required("progress_status", "body", m.ProgressStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateProgressStatusEnum("progress_status", "body", *m.ProgressStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostInstallProgressParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostInstallProgressParams) UnmarshalBinary(b []byte) error {
	var res HostInstallProgressParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
