// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstalledClusterCreateParams installed cluster create params
//
// swagger:model installed-cluster-create-params
type InstalledClusterCreateParams struct {

	// Name of the OpenShift cluster.
	// Required: true
	Name *string `json:"name"`

	// Version of the OpenShift cluster.
	// Enum: [4.5]
	OpenshiftVersion string `json:"openshift_version,omitempty"`

	// The URL of the OS image file to install on cluster's hosts.
	OsImageURL string `json:"os_image_url,omitempty"`

	// Ignition content (base64 format) for igniting worker nodes to be added to cluster.
	// Required: true
	WorkerIgnition *string `json:"worker_ignition"`
}

// Validate validates this installed cluster create params
func (m *InstalledClusterCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenshiftVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerIgnition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalledClusterCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var installedClusterCreateParamsTypeOpenshiftVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["4.5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installedClusterCreateParamsTypeOpenshiftVersionPropEnum = append(installedClusterCreateParamsTypeOpenshiftVersionPropEnum, v)
	}
}

const (

	// InstalledClusterCreateParamsOpenshiftVersionNr45 captures enum value "4.5"
	InstalledClusterCreateParamsOpenshiftVersionNr45 string = "4.5"
)

// prop value enum
func (m *InstalledClusterCreateParams) validateOpenshiftVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, installedClusterCreateParamsTypeOpenshiftVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InstalledClusterCreateParams) validateOpenshiftVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenshiftVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpenshiftVersionEnum("openshift_version", "body", m.OpenshiftVersion); err != nil {
		return err
	}

	return nil
}

func (m *InstalledClusterCreateParams) validateWorkerIgnition(formats strfmt.Registry) error {

	if err := validate.Required("worker_ignition", "body", m.WorkerIgnition); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalledClusterCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalledClusterCreateParams) UnmarshalBinary(b []byte) error {
	var res InstalledClusterCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
