// Code generated by mockery v1.0.0. DO NOT EDIT.

package restapi

import (
	context "context"

	inventory "github.com/filanov/bm-inventory/restapi/operations/inventory"
	middleware "github.com/go-openapi/runtime/middleware"

	mock "github.com/stretchr/testify/mock"
)

// MockInventoryAPI is an autogenerated mock type for the InventoryAPI type
type MockInventoryAPI struct {
	mock.Mock
}

// DeregisterCluster provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) DeregisterCluster(ctx context.Context, params inventory.DeregisterClusterParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.DeregisterClusterParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// DeregisterHost provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) DeregisterHost(ctx context.Context, params inventory.DeregisterHostParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.DeregisterHostParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// DisableHost provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) DisableHost(ctx context.Context, params inventory.DisableHostParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.DisableHostParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// DownloadClusterFiles provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) DownloadClusterFiles(ctx context.Context, params inventory.DownloadClusterFilesParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.DownloadClusterFilesParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// DownloadClusterISO provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) DownloadClusterISO(ctx context.Context, params inventory.DownloadClusterISOParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.DownloadClusterISOParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// EnableHost provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) EnableHost(ctx context.Context, params inventory.EnableHostParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.EnableHostParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GenerateClusterISO provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) GenerateClusterISO(ctx context.Context, params inventory.GenerateClusterISOParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GenerateClusterISOParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetCluster provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) GetCluster(ctx context.Context, params inventory.GetClusterParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GetClusterParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetHost provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) GetHost(ctx context.Context, params inventory.GetHostParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GetHostParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetNextSteps provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) GetNextSteps(ctx context.Context, params inventory.GetNextStepsParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GetNextStepsParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// InstallCluster provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) InstallCluster(ctx context.Context, params inventory.InstallClusterParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.InstallClusterParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// ListClusters provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) ListClusters(ctx context.Context, params inventory.ListClustersParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.ListClustersParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// ListHosts provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) ListHosts(ctx context.Context, params inventory.ListHostsParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.ListHostsParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// PostStepReply provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) PostStepReply(ctx context.Context, params inventory.PostStepReplyParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.PostStepReplyParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// RegisterCluster provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) RegisterCluster(ctx context.Context, params inventory.RegisterClusterParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.RegisterClusterParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// RegisterHost provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) RegisterHost(ctx context.Context, params inventory.RegisterHostParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.RegisterHostParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// SetDebugStep provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) SetDebugStep(ctx context.Context, params inventory.SetDebugStepParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.SetDebugStepParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// UpdateCluster provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) UpdateCluster(ctx context.Context, params inventory.UpdateClusterParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.UpdateClusterParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// UpdateHostInstallProgress provides a mock function with given fields: ctx, params
func (_m *MockInventoryAPI) UpdateHostInstallProgress(ctx context.Context, params inventory.UpdateHostInstallProgressParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, inventory.UpdateHostInstallProgressParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}
