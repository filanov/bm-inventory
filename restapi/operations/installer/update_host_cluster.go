// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateHostClusterHandlerFunc turns a function with the right signature into a update host cluster handler
type UpdateHostClusterHandlerFunc func(UpdateHostClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateHostClusterHandlerFunc) Handle(params UpdateHostClusterParams) middleware.Responder {
	return fn(params)
}

// UpdateHostClusterHandler interface for that can handle valid update host cluster params
type UpdateHostClusterHandler interface {
	Handle(UpdateHostClusterParams) middleware.Responder
}

// NewUpdateHostCluster creates a new http.Handler for the update host cluster operation
func NewUpdateHostCluster(ctx *middleware.Context, handler UpdateHostClusterHandler) *UpdateHostCluster {
	return &UpdateHostCluster{Context: ctx, Handler: handler}
}

/*UpdateHostCluster swagger:route POST /clusters/{cluster_id}/hosts/{host_id}/actions/move installer updateHostCluster

Move the host to another cluster.

*/
type UpdateHostCluster struct {
	Context *middleware.Context
	Handler UpdateHostClusterHandler
}

func (o *UpdateHostCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateHostClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
