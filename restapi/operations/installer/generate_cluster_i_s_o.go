// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenerateClusterISOHandlerFunc turns a function with the right signature into a generate cluster i s o handler
type GenerateClusterISOHandlerFunc func(GenerateClusterISOParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GenerateClusterISOHandlerFunc) Handle(params GenerateClusterISOParams) middleware.Responder {
	return fn(params)
}

// GenerateClusterISOHandler interface for that can handle valid generate cluster i s o params
type GenerateClusterISOHandler interface {
	Handle(GenerateClusterISOParams) middleware.Responder
}

// NewGenerateClusterISO creates a new http.Handler for the generate cluster i s o operation
func NewGenerateClusterISO(ctx *middleware.Context, handler GenerateClusterISOHandler) *GenerateClusterISO {
	return &GenerateClusterISO{Context: ctx, Handler: handler}
}

/*GenerateClusterISO swagger:route POST /clusters/{cluster_id}/downloads/image installer generateClusterISO

Creates a new OpenShift per-cluster discovery ISO.

*/
type GenerateClusterISO struct {
	Context *middleware.Context
	Handler GenerateClusterISOHandler
}

func (o *GenerateClusterISO) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGenerateClusterISOParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GenerateClusterISOCreatedBody generate cluster i s o created body
//
// swagger:model GenerateClusterISOCreatedBody
type GenerateClusterISOCreatedBody struct {

	// image Id
	// Format: uuid
	ImageID strfmt.UUID `json:"imageId,omitempty"`
}

// Validate validates this generate cluster i s o created body
func (o *GenerateClusterISOCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateClusterISOCreatedBody) validateImageID(formats strfmt.Registry) error {

	if swag.IsZero(o.ImageID) { // not required
		return nil
	}

	if err := validate.FormatOf("generateClusterISOCreated"+"."+"imageId", "body", "uuid", o.ImageID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GenerateClusterISOCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GenerateClusterISOCreatedBody) UnmarshalBinary(b []byte) error {
	var res GenerateClusterISOCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
