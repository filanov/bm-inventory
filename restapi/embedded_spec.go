// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Bare metal inventory",
    "title": "BMInventory",
    "version": "1.0.0"
  },
  "host": "api.openshift.com",
  "basePath": "/api/bm-inventory/v1",
  "paths": {
    "/clusters": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "List OpenShift bare metal clusters",
        "operationId": "ListClusters",
        "responses": {
          "200": {
            "description": "Cluster list",
            "schema": {
              "$ref": "#/definitions/cluster-list"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Create a new OpenShift bare metal cluster definition",
        "operationId": "RegisterCluster",
        "parameters": [
          {
            "description": "New cluster parameters",
            "name": "new-cluster-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster-create-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve OpenShift bare metal cluster information",
        "operationId": "GetCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster information",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Delete an OpenShift bare metal cluster definition",
        "operationId": "DeregisterCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster deregistered"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "inventory"
        ],
        "summary": "Update an OpenShift bare metal cluster definition",
        "operationId": "UpdateCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "description": "New cluster parameters",
            "name": "cluster-update-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster-update-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/actions/install": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Install a new OpenShift bare metal cluster",
        "operationId": "InstallCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to begin installing",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Installing cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/downloads/image": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Download OpenShift per-cluster discovery ISO",
        "operationId": "DownloadClusterISO",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster whose ISO to download",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "hostname",
            "description": "The IP address of the HTTP proxy that agents should use to access the discovery service",
            "name": "proxyIp",
            "in": "query"
          },
          {
            "maximum": 65535,
            "type": "integer",
            "description": "The port of the HTTP proxy",
            "name": "proxyPort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SSH public key for debugging the installation",
            "name": "sshPublicKey",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The ISO file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/downloads/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Download the kubeconfig file for the specified cluster",
        "operationId": "DownloadClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster whose kubeconfig to download",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The kubeconfig file",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "List OpenShift bare metal hosts",
        "operationId": "ListHosts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to get hosts from",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host list",
            "schema": {
              "$ref": "#/definitions/host-list"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Register a new OpenShift bare metal host",
        "operationId": "RegisterHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to register host to",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "description": "New host parameters",
            "name": "new-host-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/host-create-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered host",
            "schema": {
              "$ref": "#/definitions/host"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve OpenShift bare metal host information",
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to get hosts from",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to retrieve",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host information",
            "schema": {
              "$ref": "#/definitions/host"
            }
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Deregister OpenShift bare metal host",
        "operationId": "DeregisterHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to deregister host from",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to retrieve",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Host deregistered"
          },
          "400": {
            "description": "Host in use"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/actions/debug": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Set a single shot debug step that will be sent next time the agent will ask for a command",
        "operationId": "SetDebugStep",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to debug",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "description": "Next debug step",
            "name": "step",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug-step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/actions/enable": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Enable a host for use",
        "operationId": "EnableHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to enable",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Enabled"
          },
          "404": {
            "description": "Host not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Disable a host for use",
        "operationId": "DisableHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to disable",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Disabled"
          },
          "404": {
            "description": "Host not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/instructions": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve the next operations that the agent need to perform",
        "operationId": "GetNextSteps",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of host",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Instruction information",
            "schema": {
              "$ref": "#/definitions/steps"
            }
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Post the result of the operations from the server",
        "operationId": "PostStepReply",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of host",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "reply",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/step-reply"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reply accepted"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "base": {
      "type": "object",
      "required": [
        "kind",
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"primary_key\""
        },
        "kind": {
          "type": "string",
          "enum": [
            "image",
            "host",
            "cluster"
          ]
        }
      }
    },
    "block-device": {
      "type": "object",
      "properties": {
        "device-type": {
          "type": "string"
        },
        "fstype": {
          "type": "string"
        },
        "major-device-number": {
          "type": "integer"
        },
        "minor-device-number": {
          "type": "integer"
        },
        "mountpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "read-only": {
          "type": "boolean"
        },
        "removable-device": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "cidr": {
      "type": "object",
      "properties": {
        "ip-address": {
          "type": "string"
        },
        "mask": {
          "type": "integer"
        }
      }
    },
    "cluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base"
        },
        {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "apiVip": {
              "description": "Virtual IP used to reach the OpenShift cluster API",
              "type": "string",
              "format": "hostname"
            },
            "baseDnsDomain": {
              "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
              "type": "string"
            },
            "clusterNetworkCIDR": {
              "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
              "type": "string",
              "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
            },
            "clusterNetworkHostPrefix": {
              "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
              "type": "integer",
              "maximum": 32,
              "minimum": 1
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            },
            "dnsVip": {
              "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
              "type": "string",
              "format": "hostname"
            },
            "hosts": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/host"
              },
              "x-go-custom-tag": "gorm:\"foreignkey:ClusterID;association_foreignkey:ID\""
            },
            "ingressVip": {
              "description": "Virtual IP used for cluster ingress traffic",
              "type": "string",
              "format": "hostname"
            },
            "installCompletedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime;default:0\""
            },
            "installStartedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime;default:0\""
            },
            "name": {
              "description": "OpenShift cluster name",
              "type": "string"
            },
            "openshiftVersion": {
              "description": "OpenShift cluster version",
              "type": "string",
              "pattern": "^4\\.\\d$"
            },
            "pullSecret": {
              "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:varchar(4096)\""
            },
            "serviceNetworkCIDR": {
              "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
              "type": "string",
              "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
            },
            "sshPublicKey": {
              "description": "SSH public key for debugging OpenShift nodes",
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:varchar(1024)\""
            },
            "status": {
              "type": "string",
              "enum": [
                "creating",
                "ready",
                "error"
              ]
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            }
          }
        }
      ]
    },
    "cluster-create-params": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "apiVip": {
          "description": "Virtual IP used to reach the OpenShift cluster API",
          "type": "string",
          "format": "hostname"
        },
        "baseDnsDomain": {
          "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
          "type": "string"
        },
        "clusterNetworkCIDR": {
          "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "clusterNetworkHostPrefix": {
          "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        },
        "dnsVip": {
          "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
          "type": "string",
          "format": "hostname"
        },
        "ingressVip": {
          "description": "Virtual IP used for cluster ingress traffic",
          "type": "string",
          "format": "hostname"
        },
        "name": {
          "description": "OpenShift cluster name",
          "type": "string"
        },
        "openshiftVersion": {
          "description": "OpenShift cluster version",
          "type": "string",
          "pattern": "^4\\.\\d$"
        },
        "pullSecret": {
          "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
          "type": "string"
        },
        "serviceNetworkCIDR": {
          "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "sshPublicKey": {
          "description": "SSH public key for debugging OpenShift nodes",
          "type": "string"
        }
      }
    },
    "cluster-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/cluster"
      }
    },
    "cluster-update-params": {
      "type": "object",
      "properties": {
        "apiVip": {
          "description": "Virtual IP used to reach the OpenShift cluster API",
          "type": "string",
          "format": "hostname"
        },
        "baseDnsDomain": {
          "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
          "type": "string"
        },
        "clusterNetworkCIDR": {
          "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "clusterNetworkHostPrefix": {
          "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        },
        "dnsVip": {
          "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
          "type": "string",
          "format": "hostname"
        },
        "hostsRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "role": {
                "type": "string",
                "enum": [
                  "master",
                  "worker"
                ]
              }
            }
          },
          "x-go-custom-tag": "gorm:\"type:varchar(64)[]\""
        },
        "ingressVip": {
          "description": "Virtual IP used for cluster ingress traffic",
          "type": "string",
          "format": "hostname"
        },
        "name": {
          "description": "OpenShift cluster name",
          "type": "string"
        },
        "openshiftVersion": {
          "description": "OpenShift cluster version",
          "type": "string",
          "pattern": "^4\\.\\d$"
        },
        "pullSecret": {
          "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
          "type": "string"
        },
        "serviceNetworkCIDR": {
          "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "sshPublicKey": {
          "description": "SSH public key for debugging OpenShift nodes",
          "type": "string"
        }
      }
    },
    "connectivity-check-host": {
      "type": "object",
      "properties": {
        "host-id": {
          "type": "string",
          "format": "uuid"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectivity-check-nic"
          }
        }
      }
    },
    "connectivity-check-nic": {
      "type": "object",
      "properties": {
        "ip-addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "connectivity-check-params": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectivity-check-host"
      }
    },
    "connectivity-remote-host": {
      "type": "object",
      "properties": {
        "host-id": {
          "type": "string",
          "format": "uuid"
        },
        "l2-connectivity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/l2-connectivity"
          }
        },
        "l3-connectivity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/l3-connectivity"
          }
        }
      }
    },
    "connectivity-report": {
      "type": "object",
      "properties": {
        "remote-hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectivity-remote-host"
          }
        }
      }
    },
    "cpu": {
      "type": "object",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "cpu-mhz": {
          "type": "number"
        },
        "cpus": {
          "type": "integer"
        },
        "model-name": {
          "type": "string"
        },
        "sockets": {
          "type": "integer"
        },
        "threads-per-core": {
          "type": "integer"
        }
      }
    },
    "debug-step": {
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "string"
        }
      }
    },
    "host": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base"
        },
        {
          "$ref": "#/definitions/host-create-params"
        },
        {
          "type": "object",
          "required": [
            "kind",
            "status"
          ],
          "properties": {
            "clusterId": {
              "type": "string",
              "format": "uuid",
              "x-go-custom-tag": "gorm:\"primary_key;foreignkey:Cluster\""
            },
            "connectivity": {
              "$ref": "#/definitions/connectivity-report"
            },
            "hardware_info": {
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:text\""
            },
            "role": {
              "type": "string",
              "enum": [
                "undefined",
                "master",
                "worker"
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "discovering",
                "known",
                "disconnected",
                "insufficient",
                "disabled",
                "installing",
                "installed"
              ]
            },
            "statusInfo": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            }
          }
        }
      ]
    },
    "host-create-params": {
      "type": "object",
      "required": [
        "hostId"
      ],
      "properties": {
        "hostId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "host-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/host"
      }
    },
    "introspection": {
      "type": "object",
      "properties": {
        "block-devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/block-device"
          }
        },
        "cpu": {
          "$ref": "#/definitions/cpu"
        },
        "memory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/memory"
          }
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nic"
          }
        }
      }
    },
    "l2-connectivity": {
      "type": "object",
      "properties": {
        "outgoing-ip-address": {
          "type": "string"
        },
        "outgoing-nic": {
          "type": "string"
        },
        "remote-ip-address": {
          "type": "string"
        },
        "remote-mac": {
          "type": "string"
        },
        "successful": {
          "type": "boolean"
        }
      }
    },
    "l3-connectivity": {
      "type": "object",
      "properties": {
        "outgoing-nic": {
          "type": "string"
        },
        "remote-ip-address": {
          "type": "string"
        },
        "successful": {
          "type": "boolean"
        }
      }
    },
    "memory": {
      "type": "object",
      "properties": {
        "available": {
          "type": "integer"
        },
        "buff-cached": {
          "type": "integer"
        },
        "free": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "shared": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "used": {
          "type": "integer"
        }
      }
    },
    "nic": {
      "type": "object",
      "properties": {
        "cidrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cidr"
          }
        },
        "mac": {
          "type": "string"
        },
        "mtu": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "step": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "type": "string"
        },
        "step-id": {
          "type": "string"
        },
        "step-type": {
          "$ref": "#/definitions/step-type"
        }
      }
    },
    "step-reply": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "exit-code": {
          "type": "integer"
        },
        "output": {
          "type": "string"
        },
        "step-id": {
          "type": "string"
        }
      }
    },
    "step-type": {
      "type": "string",
      "enum": [
        "hardware-info",
        "connectivity-check",
        "execute"
      ]
    },
    "steps": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/step"
      }
    },
    "steps-reply": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/step-reply"
      }
    }
  },
  "tags": [
    {
      "description": "Manage bare metal inventory",
      "name": "Bare metal inventory"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Bare metal inventory",
    "title": "BMInventory",
    "version": "1.0.0"
  },
  "host": "api.openshift.com",
  "basePath": "/api/bm-inventory/v1",
  "paths": {
    "/clusters": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "List OpenShift bare metal clusters",
        "operationId": "ListClusters",
        "responses": {
          "200": {
            "description": "Cluster list",
            "schema": {
              "$ref": "#/definitions/cluster-list"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Create a new OpenShift bare metal cluster definition",
        "operationId": "RegisterCluster",
        "parameters": [
          {
            "description": "New cluster parameters",
            "name": "new-cluster-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster-create-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve OpenShift bare metal cluster information",
        "operationId": "GetCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster information",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Delete an OpenShift bare metal cluster definition",
        "operationId": "DeregisterCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster deregistered"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "inventory"
        ],
        "summary": "Update an OpenShift bare metal cluster definition",
        "operationId": "UpdateCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to retrieve",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "description": "New cluster parameters",
            "name": "cluster-update-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cluster-update-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/actions/install": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Install a new OpenShift bare metal cluster",
        "operationId": "InstallCluster",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to begin installing",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Installing cluster",
            "schema": {
              "$ref": "#/definitions/cluster"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Cluster not found"
          },
          "409": {
            "description": "Invalid state"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/downloads/image": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Download OpenShift per-cluster discovery ISO",
        "operationId": "DownloadClusterISO",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster whose ISO to download",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "hostname",
            "description": "The IP address of the HTTP proxy that agents should use to access the discovery service",
            "name": "proxyIp",
            "in": "query"
          },
          {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "The port of the HTTP proxy",
            "name": "proxyPort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "SSH public key for debugging the installation",
            "name": "sshPublicKey",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The ISO file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/downloads/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Download the kubeconfig file for the specified cluster",
        "operationId": "DownloadClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster whose kubeconfig to download",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The kubeconfig file",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "List OpenShift bare metal hosts",
        "operationId": "ListHosts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to get hosts from",
            "name": "clusterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host list",
            "schema": {
              "$ref": "#/definitions/host-list"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Register a new OpenShift bare metal host",
        "operationId": "RegisterHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to register host to",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "description": "New host parameters",
            "name": "new-host-params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/host-create-params"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registered host",
            "schema": {
              "$ref": "#/definitions/host"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve OpenShift bare metal host information",
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to get hosts from",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to retrieve",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Host information",
            "schema": {
              "$ref": "#/definitions/host"
            }
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Deregister OpenShift bare metal host",
        "operationId": "DeregisterHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster to deregister host from",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to retrieve",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Host deregistered"
          },
          "400": {
            "description": "Host in use"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/actions/debug": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Set a single shot debug step that will be sent next time the agent will ask for a command",
        "operationId": "SetDebugStep",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to debug",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "description": "Next debug step",
            "name": "step",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug-step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/actions/enable": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Enable a host for use",
        "operationId": "EnableHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to enable",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Enabled"
          },
          "404": {
            "description": "Host not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Disable a host for use",
        "operationId": "DisableHost",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the host to disable",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Disabled"
          },
          "404": {
            "description": "Host not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clusters/{clusterId}/hosts/{hostId}/instructions": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Retrieve the next operations that the agent need to perform",
        "operationId": "GetNextSteps",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of host",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Instruction information",
            "schema": {
              "$ref": "#/definitions/steps"
            }
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Post the result of the operations from the server",
        "operationId": "PostStepReply",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the cluster of the host",
            "name": "clusterId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of host",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "reply",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/step-reply"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reply accepted"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "ClusterUpdateParamsHostsRolesItems0": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "role": {
          "type": "string",
          "enum": [
            "master",
            "worker"
          ]
        }
      }
    },
    "base": {
      "type": "object",
      "required": [
        "kind",
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"primary_key\""
        },
        "kind": {
          "type": "string",
          "enum": [
            "image",
            "host",
            "cluster"
          ]
        }
      }
    },
    "block-device": {
      "type": "object",
      "properties": {
        "device-type": {
          "type": "string"
        },
        "fstype": {
          "type": "string"
        },
        "major-device-number": {
          "type": "integer"
        },
        "minor-device-number": {
          "type": "integer"
        },
        "mountpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "read-only": {
          "type": "boolean"
        },
        "removable-device": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "cidr": {
      "type": "object",
      "properties": {
        "ip-address": {
          "type": "string"
        },
        "mask": {
          "type": "integer"
        }
      }
    },
    "cluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base"
        },
        {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "apiVip": {
              "description": "Virtual IP used to reach the OpenShift cluster API",
              "type": "string",
              "format": "hostname"
            },
            "baseDnsDomain": {
              "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
              "type": "string"
            },
            "clusterNetworkCIDR": {
              "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
              "type": "string",
              "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
            },
            "clusterNetworkHostPrefix": {
              "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
              "type": "integer",
              "maximum": 32,
              "minimum": 1
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            },
            "dnsVip": {
              "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
              "type": "string",
              "format": "hostname"
            },
            "hosts": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/host"
              },
              "x-go-custom-tag": "gorm:\"foreignkey:ClusterID;association_foreignkey:ID\""
            },
            "ingressVip": {
              "description": "Virtual IP used for cluster ingress traffic",
              "type": "string",
              "format": "hostname"
            },
            "installCompletedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime;default:0\""
            },
            "installStartedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime;default:0\""
            },
            "name": {
              "description": "OpenShift cluster name",
              "type": "string"
            },
            "openshiftVersion": {
              "description": "OpenShift cluster version",
              "type": "string",
              "pattern": "^4\\.\\d$"
            },
            "pullSecret": {
              "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:varchar(4096)\""
            },
            "serviceNetworkCIDR": {
              "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
              "type": "string",
              "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
            },
            "sshPublicKey": {
              "description": "SSH public key for debugging OpenShift nodes",
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:varchar(1024)\""
            },
            "status": {
              "type": "string",
              "enum": [
                "creating",
                "ready",
                "error"
              ]
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            }
          }
        }
      ]
    },
    "cluster-create-params": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "apiVip": {
          "description": "Virtual IP used to reach the OpenShift cluster API",
          "type": "string",
          "format": "hostname"
        },
        "baseDnsDomain": {
          "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
          "type": "string"
        },
        "clusterNetworkCIDR": {
          "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "clusterNetworkHostPrefix": {
          "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        },
        "dnsVip": {
          "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
          "type": "string",
          "format": "hostname"
        },
        "ingressVip": {
          "description": "Virtual IP used for cluster ingress traffic",
          "type": "string",
          "format": "hostname"
        },
        "name": {
          "description": "OpenShift cluster name",
          "type": "string"
        },
        "openshiftVersion": {
          "description": "OpenShift cluster version",
          "type": "string",
          "pattern": "^4\\.\\d$"
        },
        "pullSecret": {
          "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
          "type": "string"
        },
        "serviceNetworkCIDR": {
          "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "sshPublicKey": {
          "description": "SSH public key for debugging OpenShift nodes",
          "type": "string"
        }
      }
    },
    "cluster-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/cluster"
      }
    },
    "cluster-update-params": {
      "type": "object",
      "properties": {
        "apiVip": {
          "description": "Virtual IP used to reach the OpenShift cluster API",
          "type": "string",
          "format": "hostname"
        },
        "baseDnsDomain": {
          "description": "The base domain of the cluster. All DNS records must be sub-domains of this base and include the cluster name.",
          "type": "string"
        },
        "clusterNetworkCIDR": {
          "description": "IP address block from which Pod IPs are allocated This block must not overlap with existing physical networks. These IP addresses are used for the Pod network, and if you need to access the Pods from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "clusterNetworkHostPrefix": {
          "description": "The subnet prefix length to assign to each individual node. For example, if clusterNetworkHostPrefix is set to 23, then each node is assigned a /23 subnet out of the given cidr (clusterNetworkCIDR), which allows for 510 (2^(32 - 23) - 2) pod IPs addresses. If you are required to provide access to nodes from an external network, configure load balancers and routers to manage the traffic.",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        },
        "dnsVip": {
          "description": "Virtual IP used internally by the cluster for automating internal DNS requirements",
          "type": "string",
          "format": "hostname"
        },
        "hostsRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterUpdateParamsHostsRolesItems0"
          },
          "x-go-custom-tag": "gorm:\"type:varchar(64)[]\""
        },
        "ingressVip": {
          "description": "Virtual IP used for cluster ingress traffic",
          "type": "string",
          "format": "hostname"
        },
        "name": {
          "description": "OpenShift cluster name",
          "type": "string"
        },
        "openshiftVersion": {
          "description": "OpenShift cluster version",
          "type": "string",
          "pattern": "^4\\.\\d$"
        },
        "pullSecret": {
          "description": "The pull secret that obtained from the Pull Secret page on the Red Hat OpenShift Cluster Manager site",
          "type": "string"
        },
        "serviceNetworkCIDR": {
          "description": "The IP address pool to use for service IP addresses. You can enter only one IP address pool. If you need to access the services from an external network, configure load balancers and routers to manage the traffic.",
          "type": "string",
          "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]|[1-2][0-9]|3[0-2]?$"
        },
        "sshPublicKey": {
          "description": "SSH public key for debugging OpenShift nodes",
          "type": "string"
        }
      }
    },
    "connectivity-check-host": {
      "type": "object",
      "properties": {
        "host-id": {
          "type": "string",
          "format": "uuid"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectivity-check-nic"
          }
        }
      }
    },
    "connectivity-check-nic": {
      "type": "object",
      "properties": {
        "ip-addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "connectivity-check-params": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectivity-check-host"
      }
    },
    "connectivity-remote-host": {
      "type": "object",
      "properties": {
        "host-id": {
          "type": "string",
          "format": "uuid"
        },
        "l2-connectivity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/l2-connectivity"
          }
        },
        "l3-connectivity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/l3-connectivity"
          }
        }
      }
    },
    "connectivity-report": {
      "type": "object",
      "properties": {
        "remote-hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectivity-remote-host"
          }
        }
      }
    },
    "cpu": {
      "type": "object",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "cpu-mhz": {
          "type": "number"
        },
        "cpus": {
          "type": "integer"
        },
        "model-name": {
          "type": "string"
        },
        "sockets": {
          "type": "integer"
        },
        "threads-per-core": {
          "type": "integer"
        }
      }
    },
    "debug-step": {
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "string"
        }
      }
    },
    "host": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base"
        },
        {
          "$ref": "#/definitions/host-create-params"
        },
        {
          "type": "object",
          "required": [
            "kind",
            "status"
          ],
          "properties": {
            "clusterId": {
              "type": "string",
              "format": "uuid",
              "x-go-custom-tag": "gorm:\"primary_key;foreignkey:Cluster\""
            },
            "connectivity": {
              "$ref": "#/definitions/connectivity-report"
            },
            "hardware_info": {
              "type": "string",
              "x-go-custom-tag": "gorm:\"type:text\""
            },
            "role": {
              "type": "string",
              "enum": [
                "undefined",
                "master",
                "worker"
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "discovering",
                "known",
                "disconnected",
                "insufficient",
                "disabled",
                "installing",
                "installed"
              ]
            },
            "statusInfo": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "x-go-custom-tag": "gorm:\"type:datetime\""
            }
          }
        }
      ]
    },
    "host-create-params": {
      "type": "object",
      "required": [
        "hostId"
      ],
      "properties": {
        "hostId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "host-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/host"
      }
    },
    "introspection": {
      "type": "object",
      "properties": {
        "block-devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/block-device"
          }
        },
        "cpu": {
          "$ref": "#/definitions/cpu"
        },
        "memory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/memory"
          }
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nic"
          }
        }
      }
    },
    "l2-connectivity": {
      "type": "object",
      "properties": {
        "outgoing-ip-address": {
          "type": "string"
        },
        "outgoing-nic": {
          "type": "string"
        },
        "remote-ip-address": {
          "type": "string"
        },
        "remote-mac": {
          "type": "string"
        },
        "successful": {
          "type": "boolean"
        }
      }
    },
    "l3-connectivity": {
      "type": "object",
      "properties": {
        "outgoing-nic": {
          "type": "string"
        },
        "remote-ip-address": {
          "type": "string"
        },
        "successful": {
          "type": "boolean"
        }
      }
    },
    "memory": {
      "type": "object",
      "properties": {
        "available": {
          "type": "integer"
        },
        "buff-cached": {
          "type": "integer"
        },
        "free": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "shared": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "used": {
          "type": "integer"
        }
      }
    },
    "nic": {
      "type": "object",
      "properties": {
        "cidrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cidr"
          }
        },
        "mac": {
          "type": "string"
        },
        "mtu": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "step": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "type": "string"
        },
        "step-id": {
          "type": "string"
        },
        "step-type": {
          "$ref": "#/definitions/step-type"
        }
      }
    },
    "step-reply": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "exit-code": {
          "type": "integer"
        },
        "output": {
          "type": "string"
        },
        "step-id": {
          "type": "string"
        }
      }
    },
    "step-type": {
      "type": "string",
      "enum": [
        "hardware-info",
        "connectivity-check",
        "execute"
      ]
    },
    "steps": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/step"
      }
    },
    "steps-reply": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/step-reply"
      }
    }
  },
  "tags": [
    {
      "description": "Manage bare metal inventory",
      "name": "Bare metal inventory"
    }
  ]
}`))
}
