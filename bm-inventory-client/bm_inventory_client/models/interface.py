# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ipv6_addresses': 'list[str]',
        'vendor': 'str',
        'name': 'str',
        'has_carrier': 'bool',
        'product': 'str',
        'mtu': 'int',
        'ipv4_addresses': 'list[str]',
        'biosdevname': 'str',
        'client_id': 'str',
        'mac_address': 'str',
        'flags': 'list[str]',
        'speed_mbps': 'int'
    }

    attribute_map = {
        'ipv6_addresses': 'ipv6_addresses',
        'vendor': 'vendor',
        'name': 'name',
        'has_carrier': 'has_carrier',
        'product': 'product',
        'mtu': 'mtu',
        'ipv4_addresses': 'ipv4_addresses',
        'biosdevname': 'biosdevname',
        'client_id': 'client_id',
        'mac_address': 'mac_address',
        'flags': 'flags',
        'speed_mbps': 'speed_mbps'
    }

    def __init__(self, ipv6_addresses=None, vendor=None, name=None, has_carrier=None, product=None, mtu=None, ipv4_addresses=None, biosdevname=None, client_id=None, mac_address=None, flags=None, speed_mbps=None):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501

        self._ipv6_addresses = None
        self._vendor = None
        self._name = None
        self._has_carrier = None
        self._product = None
        self._mtu = None
        self._ipv4_addresses = None
        self._biosdevname = None
        self._client_id = None
        self._mac_address = None
        self._flags = None
        self._speed_mbps = None
        self.discriminator = None

        if ipv6_addresses is not None:
            self.ipv6_addresses = ipv6_addresses
        if vendor is not None:
            self.vendor = vendor
        if name is not None:
            self.name = name
        if has_carrier is not None:
            self.has_carrier = has_carrier
        if product is not None:
            self.product = product
        if mtu is not None:
            self.mtu = mtu
        if ipv4_addresses is not None:
            self.ipv4_addresses = ipv4_addresses
        if biosdevname is not None:
            self.biosdevname = biosdevname
        if client_id is not None:
            self.client_id = client_id
        if mac_address is not None:
            self.mac_address = mac_address
        if flags is not None:
            self.flags = flags
        if speed_mbps is not None:
            self.speed_mbps = speed_mbps

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this Interface.  # noqa: E501


        :return: The ipv6_addresses of this Interface.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this Interface.


        :param ipv6_addresses: The ipv6_addresses of this Interface.  # noqa: E501
        :type: list[str]
        """

        self._ipv6_addresses = ipv6_addresses

    @property
    def vendor(self):
        """Gets the vendor of this Interface.  # noqa: E501


        :return: The vendor of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Interface.


        :param vendor: The vendor of this Interface.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """Gets the name of this Interface.  # noqa: E501


        :return: The name of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interface.


        :param name: The name of this Interface.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_carrier(self):
        """Gets the has_carrier of this Interface.  # noqa: E501


        :return: The has_carrier of this Interface.  # noqa: E501
        :rtype: bool
        """
        return self._has_carrier

    @has_carrier.setter
    def has_carrier(self, has_carrier):
        """Sets the has_carrier of this Interface.


        :param has_carrier: The has_carrier of this Interface.  # noqa: E501
        :type: bool
        """

        self._has_carrier = has_carrier

    @property
    def product(self):
        """Gets the product of this Interface.  # noqa: E501


        :return: The product of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Interface.


        :param product: The product of this Interface.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def mtu(self):
        """Gets the mtu of this Interface.  # noqa: E501


        :return: The mtu of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this Interface.


        :param mtu: The mtu of this Interface.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def ipv4_addresses(self):
        """Gets the ipv4_addresses of this Interface.  # noqa: E501


        :return: The ipv4_addresses of this Interface.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv4_addresses

    @ipv4_addresses.setter
    def ipv4_addresses(self, ipv4_addresses):
        """Sets the ipv4_addresses of this Interface.


        :param ipv4_addresses: The ipv4_addresses of this Interface.  # noqa: E501
        :type: list[str]
        """

        self._ipv4_addresses = ipv4_addresses

    @property
    def biosdevname(self):
        """Gets the biosdevname of this Interface.  # noqa: E501


        :return: The biosdevname of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._biosdevname

    @biosdevname.setter
    def biosdevname(self, biosdevname):
        """Sets the biosdevname of this Interface.


        :param biosdevname: The biosdevname of this Interface.  # noqa: E501
        :type: str
        """

        self._biosdevname = biosdevname

    @property
    def client_id(self):
        """Gets the client_id of this Interface.  # noqa: E501


        :return: The client_id of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Interface.


        :param client_id: The client_id of this Interface.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def mac_address(self):
        """Gets the mac_address of this Interface.  # noqa: E501


        :return: The mac_address of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Interface.


        :param mac_address: The mac_address of this Interface.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def flags(self):
        """Gets the flags of this Interface.  # noqa: E501


        :return: The flags of this Interface.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Interface.


        :param flags: The flags of this Interface.  # noqa: E501
        :type: list[str]
        """

        self._flags = flags

    @property
    def speed_mbps(self):
        """Gets the speed_mbps of this Interface.  # noqa: E501


        :return: The speed_mbps of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._speed_mbps

    @speed_mbps.setter
    def speed_mbps(self, speed_mbps):
        """Sets the speed_mbps of this Interface.


        :param speed_mbps: The speed_mbps of this Interface.  # noqa: E501
        :type: int
        """

        self._speed_mbps = speed_mbps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
