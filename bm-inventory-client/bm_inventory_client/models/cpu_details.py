# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CpuDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'architecture': 'str',
        'model_name': 'str',
        'cpus': 'int',
        'threads_per_core': 'int',
        'sockets': 'int',
        'cpu_mhz': 'float'
    }

    attribute_map = {
        'architecture': 'architecture',
        'model_name': 'model_name',
        'cpus': 'cpus',
        'threads_per_core': 'threads_per_core',
        'sockets': 'sockets',
        'cpu_mhz': 'cpu_mhz'
    }

    def __init__(self, architecture=None, model_name=None, cpus=None, threads_per_core=None, sockets=None, cpu_mhz=None):  # noqa: E501
        """CpuDetails - a model defined in Swagger"""  # noqa: E501

        self._architecture = None
        self._model_name = None
        self._cpus = None
        self._threads_per_core = None
        self._sockets = None
        self._cpu_mhz = None
        self.discriminator = None

        if architecture is not None:
            self.architecture = architecture
        if model_name is not None:
            self.model_name = model_name
        if cpus is not None:
            self.cpus = cpus
        if threads_per_core is not None:
            self.threads_per_core = threads_per_core
        if sockets is not None:
            self.sockets = sockets
        if cpu_mhz is not None:
            self.cpu_mhz = cpu_mhz

    @property
    def architecture(self):
        """Gets the architecture of this CpuDetails.  # noqa: E501


        :return: The architecture of this CpuDetails.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this CpuDetails.


        :param architecture: The architecture of this CpuDetails.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def model_name(self):
        """Gets the model_name of this CpuDetails.  # noqa: E501


        :return: The model_name of this CpuDetails.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this CpuDetails.


        :param model_name: The model_name of this CpuDetails.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def cpus(self):
        """Gets the cpus of this CpuDetails.  # noqa: E501


        :return: The cpus of this CpuDetails.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this CpuDetails.


        :param cpus: The cpus of this CpuDetails.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def threads_per_core(self):
        """Gets the threads_per_core of this CpuDetails.  # noqa: E501


        :return: The threads_per_core of this CpuDetails.  # noqa: E501
        :rtype: int
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core):
        """Sets the threads_per_core of this CpuDetails.


        :param threads_per_core: The threads_per_core of this CpuDetails.  # noqa: E501
        :type: int
        """

        self._threads_per_core = threads_per_core

    @property
    def sockets(self):
        """Gets the sockets of this CpuDetails.  # noqa: E501


        :return: The sockets of this CpuDetails.  # noqa: E501
        :rtype: int
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this CpuDetails.


        :param sockets: The sockets of this CpuDetails.  # noqa: E501
        :type: int
        """

        self._sockets = sockets

    @property
    def cpu_mhz(self):
        """Gets the cpu_mhz of this CpuDetails.  # noqa: E501


        :return: The cpu_mhz of this CpuDetails.  # noqa: E501
        :rtype: float
        """
        return self._cpu_mhz

    @cpu_mhz.setter
    def cpu_mhz(self, cpu_mhz):
        """Sets the cpu_mhz of this CpuDetails.


        :param cpu_mhz: The cpu_mhz of this CpuDetails.  # noqa: E501
        :type: float
        """

        self._cpu_mhz = cpu_mhz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpuDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
