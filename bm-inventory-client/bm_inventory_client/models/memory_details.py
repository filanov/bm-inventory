# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MemoryDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'total': 'int',
        'used': 'int',
        'free': 'int',
        'shared': 'int',
        'buff_cached': 'int',
        'available': 'int'
    }

    attribute_map = {
        'name': 'name',
        'total': 'total',
        'used': 'used',
        'free': 'free',
        'shared': 'shared',
        'buff_cached': 'buff_cached',
        'available': 'available'
    }

    def __init__(self, name=None, total=None, used=None, free=None, shared=None, buff_cached=None, available=None):  # noqa: E501
        """MemoryDetails - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._total = None
        self._used = None
        self._free = None
        self._shared = None
        self._buff_cached = None
        self._available = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if total is not None:
            self.total = total
        if used is not None:
            self.used = used
        if free is not None:
            self.free = free
        if shared is not None:
            self.shared = shared
        if buff_cached is not None:
            self.buff_cached = buff_cached
        if available is not None:
            self.available = available

    @property
    def name(self):
        """Gets the name of this MemoryDetails.  # noqa: E501


        :return: The name of this MemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemoryDetails.


        :param name: The name of this MemoryDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total(self):
        """Gets the total of this MemoryDetails.  # noqa: E501


        :return: The total of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MemoryDetails.


        :param total: The total of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def used(self):
        """Gets the used of this MemoryDetails.  # noqa: E501


        :return: The used of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this MemoryDetails.


        :param used: The used of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._used = used

    @property
    def free(self):
        """Gets the free of this MemoryDetails.  # noqa: E501


        :return: The free of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this MemoryDetails.


        :param free: The free of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._free = free

    @property
    def shared(self):
        """Gets the shared of this MemoryDetails.  # noqa: E501


        :return: The shared of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this MemoryDetails.


        :param shared: The shared of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._shared = shared

    @property
    def buff_cached(self):
        """Gets the buff_cached of this MemoryDetails.  # noqa: E501


        :return: The buff_cached of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._buff_cached

    @buff_cached.setter
    def buff_cached(self, buff_cached):
        """Sets the buff_cached of this MemoryDetails.


        :param buff_cached: The buff_cached of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._buff_cached = buff_cached

    @property
    def available(self):
        """Gets the available of this MemoryDetails.  # noqa: E501


        :return: The available of this MemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this MemoryDetails.


        :param available: The available of this MemoryDetails.  # noqa: E501
        :type: int
        """

        self._available = available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
