# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Host(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'id': 'str',
        'href': 'str',
        'cluster_id': 'str',
        'status': 'str',
        'status_info': 'str',
        'status_updated_at': 'datetime',
        'connectivity': 'str',
        'hardware_info': 'str',
        'inventory': 'str',
        'free_addresses': 'str',
        'role': 'str',
        'bootstrap': 'bool',
        'installer_version': 'str',
        'updated_at': 'datetime',
        'created_at': 'datetime',
        'checked_in_at': 'datetime',
        'discovery_agent_version': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'href': 'href',
        'cluster_id': 'cluster_id',
        'status': 'status',
        'status_info': 'status_info',
        'status_updated_at': 'status_updated_at',
        'connectivity': 'connectivity',
        'hardware_info': 'hardware_info',
        'inventory': 'inventory',
        'free_addresses': 'free_addresses',
        'role': 'role',
        'bootstrap': 'bootstrap',
        'installer_version': 'installer_version',
        'updated_at': 'updated_at',
        'created_at': 'created_at',
        'checked_in_at': 'checked_in_at',
        'discovery_agent_version': 'discovery_agent_version'
    }

    def __init__(self, kind=None, id=None, href=None, cluster_id=None, status=None, status_info=None, status_updated_at=None, connectivity=None, hardware_info=None, inventory=None, free_addresses=None, role=None, bootstrap=None, installer_version=None, updated_at=None, created_at=None, checked_in_at=None, discovery_agent_version=None):  # noqa: E501
        """Host - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._id = None
        self._href = None
        self._cluster_id = None
        self._status = None
        self._status_info = None
        self._status_updated_at = None
        self._connectivity = None
        self._hardware_info = None
        self._inventory = None
        self._free_addresses = None
        self._role = None
        self._bootstrap = None
        self._installer_version = None
        self._updated_at = None
        self._created_at = None
        self._checked_in_at = None
        self._discovery_agent_version = None
        self.discriminator = None

        self.kind = kind
        self.id = id
        self.href = href
        if cluster_id is not None:
            self.cluster_id = cluster_id
        self.status = status
        self.status_info = status_info
        if status_updated_at is not None:
            self.status_updated_at = status_updated_at
        if connectivity is not None:
            self.connectivity = connectivity
        if hardware_info is not None:
            self.hardware_info = hardware_info
        if inventory is not None:
            self.inventory = inventory
        if free_addresses is not None:
            self.free_addresses = free_addresses
        if role is not None:
            self.role = role
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if installer_version is not None:
            self.installer_version = installer_version
        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at
        if checked_in_at is not None:
            self.checked_in_at = checked_in_at
        if discovery_agent_version is not None:
            self.discovery_agent_version = discovery_agent_version

    @property
    def kind(self):
        """Gets the kind of this Host.  # noqa: E501

        Indicates the type of this object. Will be 'Host' if this is a complete object or 'HostLink' if it is just a link.  # noqa: E501

        :return: The kind of this Host.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Host.

        Indicates the type of this object. Will be 'Host' if this is a complete object or 'HostLink' if it is just a link.  # noqa: E501

        :param kind: The kind of this Host.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["Host"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this Host.  # noqa: E501

        Unique identifier of the object.  # noqa: E501

        :return: The id of this Host.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Host.

        Unique identifier of the object.  # noqa: E501

        :param id: The id of this Host.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this Host.  # noqa: E501

        Self link.  # noqa: E501

        :return: The href of this Host.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Host.

        Self link.  # noqa: E501

        :param href: The href of this Host.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Host.  # noqa: E501

        The cluster that this host is associated with.  # noqa: E501

        :return: The cluster_id of this Host.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Host.

        The cluster that this host is associated with.  # noqa: E501

        :param cluster_id: The cluster_id of this Host.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def status(self):
        """Gets the status of this Host.  # noqa: E501


        :return: The status of this Host.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Host.


        :param status: The status of this Host.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["discovering", "known", "disconnected", "insufficient", "disabled", "installing", "installing-in-progress", "installed", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_info(self):
        """Gets the status_info of this Host.  # noqa: E501


        :return: The status_info of this Host.  # noqa: E501
        :rtype: str
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """Sets the status_info of this Host.


        :param status_info: The status_info of this Host.  # noqa: E501
        :type: str
        """
        if status_info is None:
            raise ValueError("Invalid value for `status_info`, must not be `None`")  # noqa: E501

        self._status_info = status_info

    @property
    def status_updated_at(self):
        """Gets the status_updated_at of this Host.  # noqa: E501

        The last time that the host status has been updated  # noqa: E501

        :return: The status_updated_at of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """Sets the status_updated_at of this Host.

        The last time that the host status has been updated  # noqa: E501

        :param status_updated_at: The status_updated_at of this Host.  # noqa: E501
        :type: datetime
        """

        self._status_updated_at = status_updated_at

    @property
    def connectivity(self):
        """Gets the connectivity of this Host.  # noqa: E501


        :return: The connectivity of this Host.  # noqa: E501
        :rtype: str
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this Host.


        :param connectivity: The connectivity of this Host.  # noqa: E501
        :type: str
        """

        self._connectivity = connectivity

    @property
    def hardware_info(self):
        """Gets the hardware_info of this Host.  # noqa: E501


        :return: The hardware_info of this Host.  # noqa: E501
        :rtype: str
        """
        return self._hardware_info

    @hardware_info.setter
    def hardware_info(self, hardware_info):
        """Sets the hardware_info of this Host.


        :param hardware_info: The hardware_info of this Host.  # noqa: E501
        :type: str
        """

        self._hardware_info = hardware_info

    @property
    def inventory(self):
        """Gets the inventory of this Host.  # noqa: E501


        :return: The inventory of this Host.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this Host.


        :param inventory: The inventory of this Host.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def free_addresses(self):
        """Gets the free_addresses of this Host.  # noqa: E501


        :return: The free_addresses of this Host.  # noqa: E501
        :rtype: str
        """
        return self._free_addresses

    @free_addresses.setter
    def free_addresses(self, free_addresses):
        """Sets the free_addresses of this Host.


        :param free_addresses: The free_addresses of this Host.  # noqa: E501
        :type: str
        """

        self._free_addresses = free_addresses

    @property
    def role(self):
        """Gets the role of this Host.  # noqa: E501


        :return: The role of this Host.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Host.


        :param role: The role of this Host.  # noqa: E501
        :type: str
        """
        allowed_values = ["undefined", "master", "worker"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def bootstrap(self):
        """Gets the bootstrap of this Host.  # noqa: E501


        :return: The bootstrap of this Host.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this Host.


        :param bootstrap: The bootstrap of this Host.  # noqa: E501
        :type: bool
        """

        self._bootstrap = bootstrap

    @property
    def installer_version(self):
        """Gets the installer_version of this Host.  # noqa: E501

        Installer version  # noqa: E501

        :return: The installer_version of this Host.  # noqa: E501
        :rtype: str
        """
        return self._installer_version

    @installer_version.setter
    def installer_version(self, installer_version):
        """Sets the installer_version of this Host.

        Installer version  # noqa: E501

        :param installer_version: The installer_version of this Host.  # noqa: E501
        :type: str
        """

        self._installer_version = installer_version

    @property
    def updated_at(self):
        """Gets the updated_at of this Host.  # noqa: E501


        :return: The updated_at of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Host.


        :param updated_at: The updated_at of this Host.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Host.  # noqa: E501


        :return: The created_at of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Host.


        :param created_at: The created_at of this Host.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def checked_in_at(self):
        """Gets the checked_in_at of this Host.  # noqa: E501

        The last time the host's agent communicated with the service.  # noqa: E501

        :return: The checked_in_at of this Host.  # noqa: E501
        :rtype: datetime
        """
        return self._checked_in_at

    @checked_in_at.setter
    def checked_in_at(self, checked_in_at):
        """Sets the checked_in_at of this Host.

        The last time the host's agent communicated with the service.  # noqa: E501

        :param checked_in_at: The checked_in_at of this Host.  # noqa: E501
        :type: datetime
        """

        self._checked_in_at = checked_in_at

    @property
    def discovery_agent_version(self):
        """Gets the discovery_agent_version of this Host.  # noqa: E501


        :return: The discovery_agent_version of this Host.  # noqa: E501
        :rtype: str
        """
        return self._discovery_agent_version

    @discovery_agent_version.setter
    def discovery_agent_version(self, discovery_agent_version):
        """Sets the discovery_agent_version of this Host.


        :param discovery_agent_version: The discovery_agent_version of this Host.  # noqa: E501
        :type: str
        """

        self._discovery_agent_version = discovery_agent_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
