# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bm_inventory_client.models.block_device import BlockDevice  # noqa: F401,E501
from bm_inventory_client.models.cpu_details import CpuDetails  # noqa: F401,E501
from bm_inventory_client.models.memory_details import MemoryDetails  # noqa: F401,E501
from bm_inventory_client.models.nic import Nic  # noqa: F401,E501


class Introspection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'CpuDetails',
        'block_devices': 'list[BlockDevice]',
        'memory': 'list[MemoryDetails]',
        'nics': 'list[Nic]'
    }

    attribute_map = {
        'cpu': 'cpu',
        'block_devices': 'block_devices',
        'memory': 'memory',
        'nics': 'nics'
    }

    def __init__(self, cpu=None, block_devices=None, memory=None, nics=None):  # noqa: E501
        """Introspection - a model defined in Swagger"""  # noqa: E501

        self._cpu = None
        self._block_devices = None
        self._memory = None
        self._nics = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if block_devices is not None:
            self.block_devices = block_devices
        if memory is not None:
            self.memory = memory
        if nics is not None:
            self.nics = nics

    @property
    def cpu(self):
        """Gets the cpu of this Introspection.  # noqa: E501


        :return: The cpu of this Introspection.  # noqa: E501
        :rtype: CpuDetails
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Introspection.


        :param cpu: The cpu of this Introspection.  # noqa: E501
        :type: CpuDetails
        """

        self._cpu = cpu

    @property
    def block_devices(self):
        """Gets the block_devices of this Introspection.  # noqa: E501


        :return: The block_devices of this Introspection.  # noqa: E501
        :rtype: list[BlockDevice]
        """
        return self._block_devices

    @block_devices.setter
    def block_devices(self, block_devices):
        """Sets the block_devices of this Introspection.


        :param block_devices: The block_devices of this Introspection.  # noqa: E501
        :type: list[BlockDevice]
        """

        self._block_devices = block_devices

    @property
    def memory(self):
        """Gets the memory of this Introspection.  # noqa: E501


        :return: The memory of this Introspection.  # noqa: E501
        :rtype: list[MemoryDetails]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Introspection.


        :param memory: The memory of this Introspection.  # noqa: E501
        :type: list[MemoryDetails]
        """

        self._memory = memory

    @property
    def nics(self):
        """Gets the nics of this Introspection.  # noqa: E501


        :return: The nics of this Introspection.  # noqa: E501
        :rtype: list[Nic]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this Introspection.


        :param nics: The nics of this Introspection.  # noqa: E501
        :type: list[Nic]
        """

        self._nics = nics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Introspection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
