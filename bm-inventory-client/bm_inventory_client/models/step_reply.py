# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bm_inventory_client.models.step_type import StepType  # noqa: F401,E501


class StepReply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_type': 'StepType',
        'step_id': 'str',
        'exit_code': 'int',
        'output': 'str',
        'error': 'str'
    }

    attribute_map = {
        'step_type': 'step_type',
        'step_id': 'step_id',
        'exit_code': 'exit_code',
        'output': 'output',
        'error': 'error'
    }

    def __init__(self, step_type=None, step_id=None, exit_code=None, output=None, error=None):  # noqa: E501
        """StepReply - a model defined in Swagger"""  # noqa: E501

        self._step_type = None
        self._step_id = None
        self._exit_code = None
        self._output = None
        self._error = None
        self.discriminator = None

        if step_type is not None:
            self.step_type = step_type
        if step_id is not None:
            self.step_id = step_id
        if exit_code is not None:
            self.exit_code = exit_code
        if output is not None:
            self.output = output
        if error is not None:
            self.error = error

    @property
    def step_type(self):
        """Gets the step_type of this StepReply.  # noqa: E501


        :return: The step_type of this StepReply.  # noqa: E501
        :rtype: StepType
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this StepReply.


        :param step_type: The step_type of this StepReply.  # noqa: E501
        :type: StepType
        """

        self._step_type = step_type

    @property
    def step_id(self):
        """Gets the step_id of this StepReply.  # noqa: E501


        :return: The step_id of this StepReply.  # noqa: E501
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this StepReply.


        :param step_id: The step_id of this StepReply.  # noqa: E501
        :type: str
        """

        self._step_id = step_id

    @property
    def exit_code(self):
        """Gets the exit_code of this StepReply.  # noqa: E501


        :return: The exit_code of this StepReply.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this StepReply.


        :param exit_code: The exit_code of this StepReply.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    @property
    def output(self):
        """Gets the output of this StepReply.  # noqa: E501


        :return: The output of this StepReply.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this StepReply.


        :param output: The output of this StepReply.  # noqa: E501
        :type: str
        """

        self._output = output

    @property
    def error(self):
        """Gets the error of this StepReply.  # noqa: E501


        :return: The error of this StepReply.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this StepReply.


        :param error: The error of this StepReply.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StepReply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
