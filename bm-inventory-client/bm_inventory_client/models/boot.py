# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Boot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_boot_mode': 'str',
        'pxe_interface': 'str'
    }

    attribute_map = {
        'current_boot_mode': 'current_boot_mode',
        'pxe_interface': 'pxe_interface'
    }

    def __init__(self, current_boot_mode=None, pxe_interface=None):  # noqa: E501
        """Boot - a model defined in Swagger"""  # noqa: E501

        self._current_boot_mode = None
        self._pxe_interface = None
        self.discriminator = None

        if current_boot_mode is not None:
            self.current_boot_mode = current_boot_mode
        if pxe_interface is not None:
            self.pxe_interface = pxe_interface

    @property
    def current_boot_mode(self):
        """Gets the current_boot_mode of this Boot.  # noqa: E501


        :return: The current_boot_mode of this Boot.  # noqa: E501
        :rtype: str
        """
        return self._current_boot_mode

    @current_boot_mode.setter
    def current_boot_mode(self, current_boot_mode):
        """Sets the current_boot_mode of this Boot.


        :param current_boot_mode: The current_boot_mode of this Boot.  # noqa: E501
        :type: str
        """

        self._current_boot_mode = current_boot_mode

    @property
    def pxe_interface(self):
        """Gets the pxe_interface of this Boot.  # noqa: E501


        :return: The pxe_interface of this Boot.  # noqa: E501
        :rtype: str
        """
        return self._pxe_interface

    @pxe_interface.setter
    def pxe_interface(self, pxe_interface):
        """Sets the pxe_interface of this Boot.


        :param pxe_interface: The pxe_interface of this Boot.  # noqa: E501
        :type: str
        """

        self._pxe_interface = pxe_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Boot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
