# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BlockDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'major_device_number': 'int',
        'minor_device_number': 'int',
        'removable_device': 'int',
        'size': 'int',
        'read_only': 'bool',
        'device_type': 'str',
        'mountpoint': 'str',
        'fstype': 'str'
    }

    attribute_map = {
        'name': 'name',
        'major_device_number': 'major_device_number',
        'minor_device_number': 'minor_device_number',
        'removable_device': 'removable_device',
        'size': 'size',
        'read_only': 'read_only',
        'device_type': 'device_type',
        'mountpoint': 'mountpoint',
        'fstype': 'fstype'
    }

    def __init__(self, name=None, major_device_number=None, minor_device_number=None, removable_device=None, size=None, read_only=None, device_type=None, mountpoint=None, fstype=None):  # noqa: E501
        """BlockDevice - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._major_device_number = None
        self._minor_device_number = None
        self._removable_device = None
        self._size = None
        self._read_only = None
        self._device_type = None
        self._mountpoint = None
        self._fstype = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if major_device_number is not None:
            self.major_device_number = major_device_number
        if minor_device_number is not None:
            self.minor_device_number = minor_device_number
        if removable_device is not None:
            self.removable_device = removable_device
        if size is not None:
            self.size = size
        if read_only is not None:
            self.read_only = read_only
        if device_type is not None:
            self.device_type = device_type
        if mountpoint is not None:
            self.mountpoint = mountpoint
        if fstype is not None:
            self.fstype = fstype

    @property
    def name(self):
        """Gets the name of this BlockDevice.  # noqa: E501


        :return: The name of this BlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlockDevice.


        :param name: The name of this BlockDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def major_device_number(self):
        """Gets the major_device_number of this BlockDevice.  # noqa: E501


        :return: The major_device_number of this BlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._major_device_number

    @major_device_number.setter
    def major_device_number(self, major_device_number):
        """Sets the major_device_number of this BlockDevice.


        :param major_device_number: The major_device_number of this BlockDevice.  # noqa: E501
        :type: int
        """

        self._major_device_number = major_device_number

    @property
    def minor_device_number(self):
        """Gets the minor_device_number of this BlockDevice.  # noqa: E501


        :return: The minor_device_number of this BlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._minor_device_number

    @minor_device_number.setter
    def minor_device_number(self, minor_device_number):
        """Sets the minor_device_number of this BlockDevice.


        :param minor_device_number: The minor_device_number of this BlockDevice.  # noqa: E501
        :type: int
        """

        self._minor_device_number = minor_device_number

    @property
    def removable_device(self):
        """Gets the removable_device of this BlockDevice.  # noqa: E501


        :return: The removable_device of this BlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._removable_device

    @removable_device.setter
    def removable_device(self, removable_device):
        """Sets the removable_device of this BlockDevice.


        :param removable_device: The removable_device of this BlockDevice.  # noqa: E501
        :type: int
        """

        self._removable_device = removable_device

    @property
    def size(self):
        """Gets the size of this BlockDevice.  # noqa: E501


        :return: The size of this BlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BlockDevice.


        :param size: The size of this BlockDevice.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def read_only(self):
        """Gets the read_only of this BlockDevice.  # noqa: E501


        :return: The read_only of this BlockDevice.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this BlockDevice.


        :param read_only: The read_only of this BlockDevice.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def device_type(self):
        """Gets the device_type of this BlockDevice.  # noqa: E501


        :return: The device_type of this BlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this BlockDevice.


        :param device_type: The device_type of this BlockDevice.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def mountpoint(self):
        """Gets the mountpoint of this BlockDevice.  # noqa: E501


        :return: The mountpoint of this BlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._mountpoint

    @mountpoint.setter
    def mountpoint(self, mountpoint):
        """Sets the mountpoint of this BlockDevice.


        :param mountpoint: The mountpoint of this BlockDevice.  # noqa: E501
        :type: str
        """

        self._mountpoint = mountpoint

    @property
    def fstype(self):
        """Gets the fstype of this BlockDevice.  # noqa: E501


        :return: The fstype of this BlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._fstype

    @fstype.setter
    def fstype(self, fstype):
        """Sets the fstype of this BlockDevice.


        :param fstype: The fstype of this BlockDevice.  # noqa: E501
        :type: str
        """

        self._fstype = fstype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
