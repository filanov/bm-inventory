# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'frequency': 'float',
        'flags': 'list[str]',
        'model_name': 'str',
        'architecture': 'str'
    }

    attribute_map = {
        'count': 'count',
        'frequency': 'frequency',
        'flags': 'flags',
        'model_name': 'model_name',
        'architecture': 'architecture'
    }

    def __init__(self, count=None, frequency=None, flags=None, model_name=None, architecture=None):  # noqa: E501
        """Cpu - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._frequency = None
        self._flags = None
        self._model_name = None
        self._architecture = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if frequency is not None:
            self.frequency = frequency
        if flags is not None:
            self.flags = flags
        if model_name is not None:
            self.model_name = model_name
        if architecture is not None:
            self.architecture = architecture

    @property
    def count(self):
        """Gets the count of this Cpu.  # noqa: E501


        :return: The count of this Cpu.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Cpu.


        :param count: The count of this Cpu.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def frequency(self):
        """Gets the frequency of this Cpu.  # noqa: E501


        :return: The frequency of this Cpu.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Cpu.


        :param frequency: The frequency of this Cpu.  # noqa: E501
        :type: float
        """

        self._frequency = frequency

    @property
    def flags(self):
        """Gets the flags of this Cpu.  # noqa: E501


        :return: The flags of this Cpu.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Cpu.


        :param flags: The flags of this Cpu.  # noqa: E501
        :type: list[str]
        """

        self._flags = flags

    @property
    def model_name(self):
        """Gets the model_name of this Cpu.  # noqa: E501


        :return: The model_name of this Cpu.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this Cpu.


        :param model_name: The model_name of this Cpu.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def architecture(self):
        """Gets the architecture of this Cpu.  # noqa: E501


        :return: The architecture of this Cpu.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Cpu.


        :param architecture: The architecture of this Cpu.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
