# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ImageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proxy_url': 'str',
        'ssh_public_key': 'str',
        'generator_version': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'proxy_url': 'proxy_url',
        'ssh_public_key': 'ssh_public_key',
        'generator_version': 'generator_version',
        'created_at': 'created_at'
    }

    def __init__(self, proxy_url=None, ssh_public_key=None, generator_version=None, created_at=None):  # noqa: E501
        """ImageInfo - a model defined in Swagger"""  # noqa: E501

        self._proxy_url = None
        self._ssh_public_key = None
        self._generator_version = None
        self._created_at = None
        self.discriminator = None

        if proxy_url is not None:
            self.proxy_url = proxy_url
        if ssh_public_key is not None:
            self.ssh_public_key = ssh_public_key
        if generator_version is not None:
            self.generator_version = generator_version
        if created_at is not None:
            self.created_at = created_at

    @property
    def proxy_url(self):
        """Gets the proxy_url of this ImageInfo.  # noqa: E501

        The URL of the HTTP/S proxy that agents should use to access the discovery service http://\\<user\\>:\\<password\\>@\\<server\\>:\\<port\\>/   # noqa: E501

        :return: The proxy_url of this ImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this ImageInfo.

        The URL of the HTTP/S proxy that agents should use to access the discovery service http://\\<user\\>:\\<password\\>@\\<server\\>:\\<port\\>/   # noqa: E501

        :param proxy_url: The proxy_url of this ImageInfo.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this ImageInfo.  # noqa: E501

        SSH public key for debugging the installation  # noqa: E501

        :return: The ssh_public_key of this ImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this ImageInfo.

        SSH public key for debugging the installation  # noqa: E501

        :param ssh_public_key: The ssh_public_key of this ImageInfo.  # noqa: E501
        :type: str
        """

        self._ssh_public_key = ssh_public_key

    @property
    def generator_version(self):
        """Gets the generator_version of this ImageInfo.  # noqa: E501

        Image generator version  # noqa: E501

        :return: The generator_version of this ImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._generator_version

    @generator_version.setter
    def generator_version(self, generator_version):
        """Sets the generator_version of this ImageInfo.

        Image generator version  # noqa: E501

        :param generator_version: The generator_version of this ImageInfo.  # noqa: E501
        :type: str
        """

        self._generator_version = generator_version

    @property
    def created_at(self):
        """Gets the created_at of this ImageInfo.  # noqa: E501


        :return: The created_at of this ImageInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImageInfo.


        :param created_at: The created_at of this ImageInfo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
