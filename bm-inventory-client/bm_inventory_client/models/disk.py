# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Disk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drive_type': 'str',
        'vendor': 'str',
        'name': 'str',
        'path': 'str',
        'hctl': 'str',
        'by_path': 'str',
        'model': 'str',
        'wwn': 'str',
        'serial': 'str',
        'size_bytes': 'int'
    }

    attribute_map = {
        'drive_type': 'drive_type',
        'vendor': 'vendor',
        'name': 'name',
        'path': 'path',
        'hctl': 'hctl',
        'by_path': 'by_path',
        'model': 'model',
        'wwn': 'wwn',
        'serial': 'serial',
        'size_bytes': 'size_bytes'
    }

    def __init__(self, drive_type=None, vendor=None, name=None, path=None, hctl=None, by_path=None, model=None, wwn=None, serial=None, size_bytes=None):  # noqa: E501
        """Disk - a model defined in Swagger"""  # noqa: E501

        self._drive_type = None
        self._vendor = None
        self._name = None
        self._path = None
        self._hctl = None
        self._by_path = None
        self._model = None
        self._wwn = None
        self._serial = None
        self._size_bytes = None
        self.discriminator = None

        if drive_type is not None:
            self.drive_type = drive_type
        if vendor is not None:
            self.vendor = vendor
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if hctl is not None:
            self.hctl = hctl
        if by_path is not None:
            self.by_path = by_path
        if model is not None:
            self.model = model
        if wwn is not None:
            self.wwn = wwn
        if serial is not None:
            self.serial = serial
        if size_bytes is not None:
            self.size_bytes = size_bytes

    @property
    def drive_type(self):
        """Gets the drive_type of this Disk.  # noqa: E501


        :return: The drive_type of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._drive_type

    @drive_type.setter
    def drive_type(self, drive_type):
        """Sets the drive_type of this Disk.


        :param drive_type: The drive_type of this Disk.  # noqa: E501
        :type: str
        """

        self._drive_type = drive_type

    @property
    def vendor(self):
        """Gets the vendor of this Disk.  # noqa: E501


        :return: The vendor of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Disk.


        :param vendor: The vendor of this Disk.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """Gets the name of this Disk.  # noqa: E501


        :return: The name of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Disk.


        :param name: The name of this Disk.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this Disk.  # noqa: E501


        :return: The path of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Disk.


        :param path: The path of this Disk.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def hctl(self):
        """Gets the hctl of this Disk.  # noqa: E501


        :return: The hctl of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._hctl

    @hctl.setter
    def hctl(self, hctl):
        """Sets the hctl of this Disk.


        :param hctl: The hctl of this Disk.  # noqa: E501
        :type: str
        """

        self._hctl = hctl

    @property
    def by_path(self):
        """Gets the by_path of this Disk.  # noqa: E501


        :return: The by_path of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._by_path

    @by_path.setter
    def by_path(self, by_path):
        """Sets the by_path of this Disk.


        :param by_path: The by_path of this Disk.  # noqa: E501
        :type: str
        """

        self._by_path = by_path

    @property
    def model(self):
        """Gets the model of this Disk.  # noqa: E501


        :return: The model of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Disk.


        :param model: The model of this Disk.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def wwn(self):
        """Gets the wwn of this Disk.  # noqa: E501


        :return: The wwn of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this Disk.


        :param wwn: The wwn of this Disk.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    @property
    def serial(self):
        """Gets the serial of this Disk.  # noqa: E501


        :return: The serial of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Disk.


        :param serial: The serial of this Disk.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Disk.  # noqa: E501


        :return: The size_bytes of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Disk.


        :param size_bytes: The size_bytes of this Disk.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
