// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package s3wrapper is a generated GoMock package.
package s3wrapper

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockS3Wrapper is a mock of S3Wrapper interface
type MockS3Wrapper struct {
	ctrl     *gomock.Controller
	recorder *MockS3WrapperMockRecorder
}

// MockS3WrapperMockRecorder is the mock recorder for MockS3Wrapper
type MockS3WrapperMockRecorder struct {
	mock *MockS3Wrapper
}

// NewMockS3Wrapper creates a new mock instance
func NewMockS3Wrapper(ctrl *gomock.Controller) *MockS3Wrapper {
	mock := &MockS3Wrapper{ctrl: ctrl}
	mock.recorder = &MockS3WrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Wrapper) EXPECT() *MockS3WrapperMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method
func (m *MockS3Wrapper) CreateBucket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket
func (mr *MockS3WrapperMockRecorder) CreateBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockS3Wrapper)(nil).CreateBucket))
}

// Upload mocks base method
func (m *MockS3Wrapper) Upload(ctx context.Context, data []byte, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, data, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockS3WrapperMockRecorder) Upload(ctx, data, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockS3Wrapper)(nil).Upload), ctx, data, objectName)
}

// Download mocks base method
func (m *MockS3Wrapper) Download(ctx context.Context, objectName string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Download indicates an expected call of Download
func (mr *MockS3WrapperMockRecorder) Download(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockS3Wrapper)(nil).Download), ctx, objectName)
}

// DoesObjectExist mocks base method
func (m *MockS3Wrapper) DoesObjectExist(ctx context.Context, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesObjectExist", ctx, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesObjectExist indicates an expected call of DoesObjectExist
func (mr *MockS3WrapperMockRecorder) DoesObjectExist(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesObjectExist", reflect.TypeOf((*MockS3Wrapper)(nil).DoesObjectExist), ctx, objectName)
}

// DeleteObject mocks base method
func (m *MockS3Wrapper) DeleteObject(ctx context.Context, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockS3WrapperMockRecorder) DeleteObject(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockS3Wrapper)(nil).DeleteObject), ctx, objectName)
}

// UpdateObjectTag mocks base method
func (m *MockS3Wrapper) UpdateObjectTag(ctx context.Context, objectName, key, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectTag", ctx, objectName, key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectTag indicates an expected call of UpdateObjectTag
func (mr *MockS3WrapperMockRecorder) UpdateObjectTag(ctx, objectName, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectTag", reflect.TypeOf((*MockS3Wrapper)(nil).UpdateObjectTag), ctx, objectName, key, value)
}
