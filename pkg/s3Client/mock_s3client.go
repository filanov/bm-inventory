// Code generated by MockGen. DO NOT EDIT.
// Source: s3Client.go

// Package s3Client is a generated GoMock package.
package s3Client

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	"time"
)

// MockS3Client is a mock of S3Client interface
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// PushDataToS3 mocks base method
func (m *MockS3Client) PushDataToS3(ctx context.Context, data []byte, fileName, s3Bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushDataToS3", ctx, data, fileName, s3Bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushDataToS3 indicates an expected call of PushDataToS3
func (mr *MockS3ClientMockRecorder) PushDataToS3(ctx, data, fileName, s3Bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushDataToS3", reflect.TypeOf((*MockS3Client)(nil).PushDataToS3), ctx, data, fileName, s3Bucket)
}

// DownloadFileFromS3 mocks base method
func (m *MockS3Client) DownloadFileFromS3(ctx context.Context, fileName, s3Bucket string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileFromS3", ctx, fileName, s3Bucket)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadFileFromS3 indicates an expected call of DownloadFileFromS3
func (mr *MockS3ClientMockRecorder) DownloadFileFromS3(ctx, fileName, s3Bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileFromS3", reflect.TypeOf((*MockS3Client)(nil).DownloadFileFromS3), ctx, fileName, s3Bucket)
}

// DoesObjectExist mocks base method
func (m *MockS3Client) DoesObjectExist(ctx context.Context, fileName, s3Bucket string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesObjectExist", ctx, fileName, s3Bucket)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesObjectExist indicates an expected call of DoesObjectExist
func (mr *MockS3ClientMockRecorder) DoesObjectExist(ctx, fileName, s3Bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesObjectExist", reflect.TypeOf((*MockS3Client)(nil).DoesObjectExist), ctx, fileName, s3Bucket)
}

// UpdateObjectTag mocks base method
func (m *MockS3Client) UpdateObjectTag(ctx context.Context, objectName, s3Bucket, key, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectTag", ctx, objectName, s3Bucket, key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectTag indicates an expected call of UpdateObjectTag
func (mr *MockS3ClientMockRecorder) UpdateObjectTag(ctx, objectName, s3Bucket, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectTag", reflect.TypeOf((*MockS3Client)(nil).UpdateObjectTag), ctx, objectName, s3Bucket, key, value)
}

// DeleteFileFromS3 mocks base method
func (m *MockS3Client) DeleteFileFromS3(ctx context.Context, fileName, s3Bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileFromS3", ctx, fileName, s3Bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileFromS3 indicates an expected call of DeleteFileFromS3
func (mr *MockS3ClientMockRecorder) DeleteFileFromS3(ctx, fileName, s3Bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileFromS3", reflect.TypeOf((*MockS3Client)(nil).DeleteFileFromS3), ctx, fileName, s3Bucket)
}

// GetPresignedURL mocks base method
func (m *MockS3Client) GetPresignedURL(ctx context.Context, objectName string, s3Bucket string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", ctx, objectName, s3Bucket, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL
func (mr *MockS3ClientMockRecorder) GetPresignedURL(ctx, objectName, s3Bucket, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockS3Client)(nil).GetPresignedURL), ctx, objectName, s3Bucket, duration)
}